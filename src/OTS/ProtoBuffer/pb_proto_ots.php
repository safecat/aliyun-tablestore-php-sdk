<?php 
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@  
// Source: ots.proto 
// Date: 2016-08-01 10:06:36 


namespace com\aliyun\cloudservice\ots2 {

            class ColumnType extends \DrSlump\Protobuf\Enum
    {
                const INF_MIN = 0;
                const INF_MAX = 1;
                const INTEGER = 2;
                const STRING = 3;
                const BOOLEAN = 4;
                const DOUBLE = 5;
                const BINARY = 6;
    }
}
 

namespace com\aliyun\cloudservice\ots2 {

            class RowExistenceExpectation extends \DrSlump\Protobuf\Enum
    {
                const IGNORE = 0;
                const EXPECT_EXIST = 1;
                const EXPECT_NOT_EXIST = 2;
    }
}
 

namespace com\aliyun\cloudservice\ots2 {

            class OperationType extends \DrSlump\Protobuf\Enum
    {
                const PUT = 1;
                const DELETE = 2;
    }
}
 

namespace com\aliyun\cloudservice\ots2 {

            class Direction extends \DrSlump\Protobuf\Enum
    {
                const FORWARD = 0;
                const BACKWARD = 1;
    }
}
 

namespace com\aliyun\cloudservice\ots2 {

         
    class Error extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.Error');

                        // required string code = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "code";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // optional string message = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "message";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "code" has a value
         *
         * @return boolean
         */
        public function hasCode()
        {
            return isset($this->code);
        }

        /**
         * Clear "code" value
         */
        public function clearCode()
        {
            unset($this->code);
        }

        
        /**
         * Get "code" value
                  * @return \string                  *
         *
         */
        public function getCode()
        {
                        return $this->code;
                    }

        /**
         * Set "code" value
         *
         * @param \string $value
         */
        public function setCode($value)
        {
            return $this->code = $value;
        }

        
                
        /**
         * Check if "message" has a value
         *
         * @return boolean
         */
        public function hasMessage()
        {
            return isset($this->message);
        }

        /**
         * Clear "message" value
         */
        public function clearMessage()
        {
            unset($this->message);
        }

        
        /**
         * Get "message" value
                  * @return \PhpOption\Option of type (\string)
                  *
         *
         */
        public function getMessage()
        {
                        return \PhpOption\Option::fromValue($this->message);
                    }

        /**
         * Set "message" value
         *
         * @param \string $value
         */
        public function setMessage($value)
        {
            return $this->message = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class ColumnSchema extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.ColumnSchema');

                        // required string name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // required enum type = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ColumnType';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
                  * @return \string                  *
         *
         */
        public function getName()
        {
                        return $this->name;
                    }

        /**
         * Set "name" value
         *
         * @param \string $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        
                
        /**
         * Check if "type" has a value
         *
         * @return boolean
         */
        public function hasType()
        {
            return isset($this->type);
        }

        /**
         * Clear "type" value
         */
        public function clearType()
        {
            unset($this->type);
        }

        
        /**
         * Get "type" value
                  * @return \int - com\aliyun\cloudservice\ots2\ColumnType                  *
         *
         */
        public function getType()
        {
                        return $this->type;
                    }

        /**
         * Set "type" value
         *
         * @param \int - com\aliyun\cloudservice\ots2\ColumnType $value
         */
        public function setType($value)
        {
            return $this->type = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class ColumnValue extends \DrSlump\Protobuf\Message {
                                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.ColumnValue');

                        // required enum type = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ColumnType';

            $descriptor->addField($f);
                        // optional int64 v_int = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "v_int";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT64;

            $descriptor->addField($f);
                        // optional string v_string = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "v_string";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // optional bool v_bool = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "v_bool";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);
                        // optional double v_double = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "v_double";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_DOUBLE;

            $descriptor->addField($f);
                        // optional bytes v_binary = 6 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "v_binary";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "type" has a value
         *
         * @return boolean
         */
        public function hasType()
        {
            return isset($this->type);
        }

        /**
         * Clear "type" value
         */
        public function clearType()
        {
            unset($this->type);
        }

        
        /**
         * Get "type" value
                  * @return \int - com\aliyun\cloudservice\ots2\ColumnType                  *
         *
         */
        public function getType()
        {
                        return $this->type;
                    }

        /**
         * Set "type" value
         *
         * @param \int - com\aliyun\cloudservice\ots2\ColumnType $value
         */
        public function setType($value)
        {
            return $this->type = $value;
        }

        
                
        /**
         * Check if "v_int" has a value
         *
         * @return boolean
         */
        public function hasVInt()
        {
            return isset($this->v_int);
        }

        /**
         * Clear "v_int" value
         */
        public function clearVInt()
        {
            unset($this->v_int);
        }

        
        /**
         * Get "v_int" value
                  * @return \PhpOption\Option of type (\int)
                  *
         *
         */
        public function getVInt()
        {
                        return \PhpOption\Option::fromValue($this->v_int);
                    }

        /**
         * Set "v_int" value
         *
         * @param \int $value
         */
        public function setVInt($value)
        {
            return $this->v_int = $value;
        }

        
                
        /**
         * Check if "v_string" has a value
         *
         * @return boolean
         */
        public function hasVString()
        {
            return isset($this->v_string);
        }

        /**
         * Clear "v_string" value
         */
        public function clearVString()
        {
            unset($this->v_string);
        }

        
        /**
         * Get "v_string" value
                  * @return \PhpOption\Option of type (\string)
                  *
         *
         */
        public function getVString()
        {
                        return \PhpOption\Option::fromValue($this->v_string);
                    }

        /**
         * Set "v_string" value
         *
         * @param \string $value
         */
        public function setVString($value)
        {
            return $this->v_string = $value;
        }

        
                
        /**
         * Check if "v_bool" has a value
         *
         * @return boolean
         */
        public function hasVBool()
        {
            return isset($this->v_bool);
        }

        /**
         * Clear "v_bool" value
         */
        public function clearVBool()
        {
            unset($this->v_bool);
        }

        
        /**
         * Get "v_bool" value
                  * @return \PhpOption\Option of type (\boolean)
                  *
         *
         */
        public function getVBool()
        {
                        return \PhpOption\Option::fromValue($this->v_bool);
                    }

        /**
         * Set "v_bool" value
         *
         * @param \boolean $value
         */
        public function setVBool($value)
        {
            return $this->v_bool = $value;
        }

        
                
        /**
         * Check if "v_double" has a value
         *
         * @return boolean
         */
        public function hasVDouble()
        {
            return isset($this->v_double);
        }

        /**
         * Clear "v_double" value
         */
        public function clearVDouble()
        {
            unset($this->v_double);
        }

        
        /**
         * Get "v_double" value
                  * @return \PhpOption\Option of type (\float)
                  *
         *
         */
        public function getVDouble()
        {
                        return \PhpOption\Option::fromValue($this->v_double);
                    }

        /**
         * Set "v_double" value
         *
         * @param \float $value
         */
        public function setVDouble($value)
        {
            return $this->v_double = $value;
        }

        
                
        /**
         * Check if "v_binary" has a value
         *
         * @return boolean
         */
        public function hasVBinary()
        {
            return isset($this->v_binary);
        }

        /**
         * Clear "v_binary" value
         */
        public function clearVBinary()
        {
            unset($this->v_binary);
        }

        
        /**
         * Get "v_binary" value
                  * @return \PhpOption\Option of type (\string)
                  *
         *
         */
        public function getVBinary()
        {
                        return \PhpOption\Option::fromValue($this->v_binary);
                    }

        /**
         * Set "v_binary" value
         *
         * @param \string $value
         */
        public function setVBinary($value)
        {
            return $this->v_binary = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class Column extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.Column');

                        // required string name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // required message value = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ColumnValue';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
                  * @return \string                  *
         *
         */
        public function getName()
        {
                        return $this->name;
                    }

        /**
         * Set "name" value
         *
         * @param \string $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        
                
        /**
         * Check if "value" has a value
         *
         * @return boolean
         */
        public function hasValue()
        {
            return isset($this->value);
        }

        /**
         * Clear "value" value
         */
        public function clearValue()
        {
            unset($this->value);
        }

        
        /**
         * Get "value" value
                  * @return \com\aliyun\cloudservice\ots2\ColumnValue                  *
         *
         */
        public function getValue()
        {
                        return $this->value;
                    }

        /**
         * Set "value" value
         *
         * @param \com\aliyun\cloudservice\ots2\ColumnValue $value
         */
        public function setValue($value)
        {
            return $this->value = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class Row extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.Row');

                        // repeated message primary_key_columns = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "primary_key_columns";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
                        // repeated message attribute_columns = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "attribute_columns";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "primary_key_columns" has a value
         *
         * @return boolean
         */
        public function hasPrimaryKeyColumns()
        {
            return isset($this->primary_key_columns);
        }

        /**
         * Clear "primary_key_columns" value
         */
        public function clearPrimaryKeyColumns()
        {
            unset($this->primary_key_columns);
        }

        
        /**
         * Get "primary_key_columns" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKeyColumns($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->primary_key_columns)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->primary_key_columns[$idx]);
        }

        /**
         * Get "primary_key_columns" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKeyColumnsList()
        {
            return $this->primary_key_columns;
        }

        /**
         * @deprecated Use setPrimaryKeyColumnsList($value) instead
         * Set "primary_key_columns" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setPrimaryKeyColumns($value)
        {
            return $this->primary_key_columns = $value;
        }

        /**
         * Set "primary_key_columns" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setPrimaryKeyColumnsList($value)
         {
             return $this->primary_key_columns = $value;
         }

        /**
         * Add a new element to "primary_key_columns"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addPrimaryKeyColumns($value)
        {
            $this->primary_key_columns[] = $value;
        }

        
                
        /**
         * Check if "attribute_columns" has a value
         *
         * @return boolean
         */
        public function hasAttributeColumns()
        {
            return isset($this->attribute_columns);
        }

        /**
         * Clear "attribute_columns" value
         */
        public function clearAttributeColumns()
        {
            unset($this->attribute_columns);
        }

        
        /**
         * Get "attribute_columns" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getAttributeColumns($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->attribute_columns)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->attribute_columns[$idx]);
        }

        /**
         * Get "attribute_columns" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getAttributeColumnsList()
        {
            return $this->attribute_columns;
        }

        /**
         * @deprecated Use setAttributeColumnsList($value) instead
         * Set "attribute_columns" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setAttributeColumns($value)
        {
            return $this->attribute_columns = $value;
        }

        /**
         * Set "attribute_columns" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setAttributeColumnsList($value)
         {
             return $this->attribute_columns = $value;
         }

        /**
         * Add a new element to "attribute_columns"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addAttributeColumns($value)
        {
            $this->attribute_columns[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class TableMeta extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.TableMeta');

                        // required string table_name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // repeated message primary_key = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "primary_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ColumnSchema';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_name" has a value
         *
         * @return boolean
         */
        public function hasTableName()
        {
            return isset($this->table_name);
        }

        /**
         * Clear "table_name" value
         */
        public function clearTableName()
        {
            unset($this->table_name);
        }

        
        /**
         * Get "table_name" value
                  * @return \string                  *
         *
         */
        public function getTableName()
        {
                        return $this->table_name;
                    }

        /**
         * Set "table_name" value
         *
         * @param \string $value
         */
        public function setTableName($value)
        {
            return $this->table_name = $value;
        }

        
                
        /**
         * Check if "primary_key" has a value
         *
         * @return boolean
         */
        public function hasPrimaryKey()
        {
            return isset($this->primary_key);
        }

        /**
         * Clear "primary_key" value
         */
        public function clearPrimaryKey()
        {
            unset($this->primary_key);
        }

        
        /**
         * Get "primary_key" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\ColumnSchema[]
         */
        public function getPrimaryKey($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->primary_key)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->primary_key[$idx]);
        }

        /**
         * Get "primary_key" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\ColumnSchema[]
         */
        public function getPrimaryKeyList()
        {
            return $this->primary_key;
        }

        /**
         * @deprecated Use setPrimaryKeyList($value) instead
         * Set "primary_key" value
         * @param \com\aliyun\cloudservice\ots2\ColumnSchema[] $value
         */
        public function setPrimaryKey($value)
        {
            return $this->primary_key = $value;
        }

        /**
         * Set "primary_key" list
         * @param \com\aliyun\cloudservice\ots2\ColumnSchema[]|\Traversable $value
         */
         public function setPrimaryKeyList($value)
         {
             return $this->primary_key = $value;
         }

        /**
         * Add a new element to "primary_key"
         *
         * @param \com\aliyun\cloudservice\ots2\ColumnSchema $value
         */
        public function addPrimaryKey($value)
        {
            $this->primary_key[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class Condition extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.Condition');

                        // required enum row_existence = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "row_existence";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\RowExistenceExpectation';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "row_existence" has a value
         *
         * @return boolean
         */
        public function hasRowExistence()
        {
            return isset($this->row_existence);
        }

        /**
         * Clear "row_existence" value
         */
        public function clearRowExistence()
        {
            unset($this->row_existence);
        }

        
        /**
         * Get "row_existence" value
                  * @return \int - com\aliyun\cloudservice\ots2\RowExistenceExpectation                  *
         *
         */
        public function getRowExistence()
        {
                        return $this->row_existence;
                    }

        /**
         * Set "row_existence" value
         *
         * @param \int - com\aliyun\cloudservice\ots2\RowExistenceExpectation $value
         */
        public function setRowExistence($value)
        {
            return $this->row_existence = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class CapacityUnit extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.CapacityUnit');

                        // optional int32 read = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "read";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
                        // optional int32 write = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "write";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "read" has a value
         *
         * @return boolean
         */
        public function hasRead()
        {
            return isset($this->read);
        }

        /**
         * Clear "read" value
         */
        public function clearRead()
        {
            unset($this->read);
        }

        
        /**
         * Get "read" value
                  * @return \PhpOption\Option of type (\int)
                  *
         *
         */
        public function getRead()
        {
                        return \PhpOption\Option::fromValue($this->read);
                    }

        /**
         * Set "read" value
         *
         * @param \int $value
         */
        public function setRead($value)
        {
            return $this->read = $value;
        }

        
                
        /**
         * Check if "write" has a value
         *
         * @return boolean
         */
        public function hasWrite()
        {
            return isset($this->write);
        }

        /**
         * Clear "write" value
         */
        public function clearWrite()
        {
            unset($this->write);
        }

        
        /**
         * Get "write" value
                  * @return \PhpOption\Option of type (\int)
                  *
         *
         */
        public function getWrite()
        {
                        return \PhpOption\Option::fromValue($this->write);
                    }

        /**
         * Set "write" value
         *
         * @param \int $value
         */
        public function setWrite($value)
        {
            return $this->write = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class ReservedThroughputDetails extends \DrSlump\Protobuf\Message {
                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.ReservedThroughputDetails');

                        // required message capacity_unit = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "capacity_unit";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\CapacityUnit';

            $descriptor->addField($f);
                        // required int64 last_increase_time = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "last_increase_time";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT64;

            $descriptor->addField($f);
                        // optional int64 last_decrease_time = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "last_decrease_time";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT64;

            $descriptor->addField($f);
                        // required int32 number_of_decreases_today = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "number_of_decreases_today";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "capacity_unit" has a value
         *
         * @return boolean
         */
        public function hasCapacityUnit()
        {
            return isset($this->capacity_unit);
        }

        /**
         * Clear "capacity_unit" value
         */
        public function clearCapacityUnit()
        {
            unset($this->capacity_unit);
        }

        
        /**
         * Get "capacity_unit" value
                  * @return \com\aliyun\cloudservice\ots2\CapacityUnit                  *
         *
         */
        public function getCapacityUnit()
        {
                        return $this->capacity_unit;
                    }

        /**
         * Set "capacity_unit" value
         *
         * @param \com\aliyun\cloudservice\ots2\CapacityUnit $value
         */
        public function setCapacityUnit($value)
        {
            return $this->capacity_unit = $value;
        }

        
                
        /**
         * Check if "last_increase_time" has a value
         *
         * @return boolean
         */
        public function hasLastIncreaseTime()
        {
            return isset($this->last_increase_time);
        }

        /**
         * Clear "last_increase_time" value
         */
        public function clearLastIncreaseTime()
        {
            unset($this->last_increase_time);
        }

        
        /**
         * Get "last_increase_time" value
                  * @return \int                  *
         *
         */
        public function getLastIncreaseTime()
        {
                        return $this->last_increase_time;
                    }

        /**
         * Set "last_increase_time" value
         *
         * @param \int $value
         */
        public function setLastIncreaseTime($value)
        {
            return $this->last_increase_time = $value;
        }

        
                
        /**
         * Check if "last_decrease_time" has a value
         *
         * @return boolean
         */
        public function hasLastDecreaseTime()
        {
            return isset($this->last_decrease_time);
        }

        /**
         * Clear "last_decrease_time" value
         */
        public function clearLastDecreaseTime()
        {
            unset($this->last_decrease_time);
        }

        
        /**
         * Get "last_decrease_time" value
                  * @return \PhpOption\Option of type (\int)
                  *
         *
         */
        public function getLastDecreaseTime()
        {
                        return \PhpOption\Option::fromValue($this->last_decrease_time);
                    }

        /**
         * Set "last_decrease_time" value
         *
         * @param \int $value
         */
        public function setLastDecreaseTime($value)
        {
            return $this->last_decrease_time = $value;
        }

        
                
        /**
         * Check if "number_of_decreases_today" has a value
         *
         * @return boolean
         */
        public function hasNumberOfDecreasesToday()
        {
            return isset($this->number_of_decreases_today);
        }

        /**
         * Clear "number_of_decreases_today" value
         */
        public function clearNumberOfDecreasesToday()
        {
            unset($this->number_of_decreases_today);
        }

        
        /**
         * Get "number_of_decreases_today" value
                  * @return \int                  *
         *
         */
        public function getNumberOfDecreasesToday()
        {
                        return $this->number_of_decreases_today;
                    }

        /**
         * Set "number_of_decreases_today" value
         *
         * @param \int $value
         */
        public function setNumberOfDecreasesToday($value)
        {
            return $this->number_of_decreases_today = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class ReservedThroughput extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.ReservedThroughput');

                        // required message capacity_unit = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "capacity_unit";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\CapacityUnit';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "capacity_unit" has a value
         *
         * @return boolean
         */
        public function hasCapacityUnit()
        {
            return isset($this->capacity_unit);
        }

        /**
         * Clear "capacity_unit" value
         */
        public function clearCapacityUnit()
        {
            unset($this->capacity_unit);
        }

        
        /**
         * Get "capacity_unit" value
                  * @return \com\aliyun\cloudservice\ots2\CapacityUnit                  *
         *
         */
        public function getCapacityUnit()
        {
                        return $this->capacity_unit;
                    }

        /**
         * Set "capacity_unit" value
         *
         * @param \com\aliyun\cloudservice\ots2\CapacityUnit $value
         */
        public function setCapacityUnit($value)
        {
            return $this->capacity_unit = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class ConsumedCapacity extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.ConsumedCapacity');

                        // required message capacity_unit = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "capacity_unit";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\CapacityUnit';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "capacity_unit" has a value
         *
         * @return boolean
         */
        public function hasCapacityUnit()
        {
            return isset($this->capacity_unit);
        }

        /**
         * Clear "capacity_unit" value
         */
        public function clearCapacityUnit()
        {
            unset($this->capacity_unit);
        }

        
        /**
         * Get "capacity_unit" value
                  * @return \com\aliyun\cloudservice\ots2\CapacityUnit                  *
         *
         */
        public function getCapacityUnit()
        {
                        return $this->capacity_unit;
                    }

        /**
         * Set "capacity_unit" value
         *
         * @param \com\aliyun\cloudservice\ots2\CapacityUnit $value
         */
        public function setCapacityUnit($value)
        {
            return $this->capacity_unit = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class CreateTableRequest extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.CreateTableRequest');

                        // required message table_meta = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_meta";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\TableMeta';

            $descriptor->addField($f);
                        // required message reserved_throughput = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "reserved_throughput";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ReservedThroughput';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_meta" has a value
         *
         * @return boolean
         */
        public function hasTableMeta()
        {
            return isset($this->table_meta);
        }

        /**
         * Clear "table_meta" value
         */
        public function clearTableMeta()
        {
            unset($this->table_meta);
        }

        
        /**
         * Get "table_meta" value
                  * @return \com\aliyun\cloudservice\ots2\TableMeta                  *
         *
         */
        public function getTableMeta()
        {
                        return $this->table_meta;
                    }

        /**
         * Set "table_meta" value
         *
         * @param \com\aliyun\cloudservice\ots2\TableMeta $value
         */
        public function setTableMeta($value)
        {
            return $this->table_meta = $value;
        }

        
                
        /**
         * Check if "reserved_throughput" has a value
         *
         * @return boolean
         */
        public function hasReservedThroughput()
        {
            return isset($this->reserved_throughput);
        }

        /**
         * Clear "reserved_throughput" value
         */
        public function clearReservedThroughput()
        {
            unset($this->reserved_throughput);
        }

        
        /**
         * Get "reserved_throughput" value
                  * @return \com\aliyun\cloudservice\ots2\ReservedThroughput                  *
         *
         */
        public function getReservedThroughput()
        {
                        return $this->reserved_throughput;
                    }

        /**
         * Set "reserved_throughput" value
         *
         * @param \com\aliyun\cloudservice\ots2\ReservedThroughput $value
         */
        public function setReservedThroughput($value)
        {
            return $this->reserved_throughput = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class CreateTableResponse extends \DrSlump\Protobuf\Message {
             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.CreateTableResponse');

            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class UpdateTableRequest extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.UpdateTableRequest');

                        // required string table_name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // required message reserved_throughput = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "reserved_throughput";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ReservedThroughput';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_name" has a value
         *
         * @return boolean
         */
        public function hasTableName()
        {
            return isset($this->table_name);
        }

        /**
         * Clear "table_name" value
         */
        public function clearTableName()
        {
            unset($this->table_name);
        }

        
        /**
         * Get "table_name" value
                  * @return \string                  *
         *
         */
        public function getTableName()
        {
                        return $this->table_name;
                    }

        /**
         * Set "table_name" value
         *
         * @param \string $value
         */
        public function setTableName($value)
        {
            return $this->table_name = $value;
        }

        
                
        /**
         * Check if "reserved_throughput" has a value
         *
         * @return boolean
         */
        public function hasReservedThroughput()
        {
            return isset($this->reserved_throughput);
        }

        /**
         * Clear "reserved_throughput" value
         */
        public function clearReservedThroughput()
        {
            unset($this->reserved_throughput);
        }

        
        /**
         * Get "reserved_throughput" value
                  * @return \com\aliyun\cloudservice\ots2\ReservedThroughput                  *
         *
         */
        public function getReservedThroughput()
        {
                        return $this->reserved_throughput;
                    }

        /**
         * Set "reserved_throughput" value
         *
         * @param \com\aliyun\cloudservice\ots2\ReservedThroughput $value
         */
        public function setReservedThroughput($value)
        {
            return $this->reserved_throughput = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class UpdateTableResponse extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.UpdateTableResponse');

                        // required message reserved_throughput_details = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "reserved_throughput_details";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ReservedThroughputDetails';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "reserved_throughput_details" has a value
         *
         * @return boolean
         */
        public function hasReservedThroughputDetails()
        {
            return isset($this->reserved_throughput_details);
        }

        /**
         * Clear "reserved_throughput_details" value
         */
        public function clearReservedThroughputDetails()
        {
            unset($this->reserved_throughput_details);
        }

        
        /**
         * Get "reserved_throughput_details" value
                  * @return \com\aliyun\cloudservice\ots2\ReservedThroughputDetails                  *
         *
         */
        public function getReservedThroughputDetails()
        {
                        return $this->reserved_throughput_details;
                    }

        /**
         * Set "reserved_throughput_details" value
         *
         * @param \com\aliyun\cloudservice\ots2\ReservedThroughputDetails $value
         */
        public function setReservedThroughputDetails($value)
        {
            return $this->reserved_throughput_details = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class DescribeTableRequest extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.DescribeTableRequest');

                        // required string table_name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_name" has a value
         *
         * @return boolean
         */
        public function hasTableName()
        {
            return isset($this->table_name);
        }

        /**
         * Clear "table_name" value
         */
        public function clearTableName()
        {
            unset($this->table_name);
        }

        
        /**
         * Get "table_name" value
                  * @return \string                  *
         *
         */
        public function getTableName()
        {
                        return $this->table_name;
                    }

        /**
         * Set "table_name" value
         *
         * @param \string $value
         */
        public function setTableName($value)
        {
            return $this->table_name = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class DescribeTableResponse extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.DescribeTableResponse');

                        // required message table_meta = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_meta";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\TableMeta';

            $descriptor->addField($f);
                        // required message reserved_throughput_details = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "reserved_throughput_details";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ReservedThroughputDetails';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_meta" has a value
         *
         * @return boolean
         */
        public function hasTableMeta()
        {
            return isset($this->table_meta);
        }

        /**
         * Clear "table_meta" value
         */
        public function clearTableMeta()
        {
            unset($this->table_meta);
        }

        
        /**
         * Get "table_meta" value
                  * @return \com\aliyun\cloudservice\ots2\TableMeta                  *
         *
         */
        public function getTableMeta()
        {
                        return $this->table_meta;
                    }

        /**
         * Set "table_meta" value
         *
         * @param \com\aliyun\cloudservice\ots2\TableMeta $value
         */
        public function setTableMeta($value)
        {
            return $this->table_meta = $value;
        }

        
                
        /**
         * Check if "reserved_throughput_details" has a value
         *
         * @return boolean
         */
        public function hasReservedThroughputDetails()
        {
            return isset($this->reserved_throughput_details);
        }

        /**
         * Clear "reserved_throughput_details" value
         */
        public function clearReservedThroughputDetails()
        {
            unset($this->reserved_throughput_details);
        }

        
        /**
         * Get "reserved_throughput_details" value
                  * @return \com\aliyun\cloudservice\ots2\ReservedThroughputDetails                  *
         *
         */
        public function getReservedThroughputDetails()
        {
                        return $this->reserved_throughput_details;
                    }

        /**
         * Set "reserved_throughput_details" value
         *
         * @param \com\aliyun\cloudservice\ots2\ReservedThroughputDetails $value
         */
        public function setReservedThroughputDetails($value)
        {
            return $this->reserved_throughput_details = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class ListTableRequest extends \DrSlump\Protobuf\Message {
             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.ListTableRequest');

            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class ListTableResponse extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.ListTableResponse');

                        // repeated string table_names = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_names";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_names" has a value
         *
         * @return boolean
         */
        public function hasTableNames()
        {
            return isset($this->table_names);
        }

        /**
         * Clear "table_names" value
         */
        public function clearTableNames()
        {
            unset($this->table_names);
        }

        
        /**
         * Get "table_names" value
         *
         * @return \PhpOption\Option of type \string[]
         */
        public function getTableNames($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->table_names)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->table_names[$idx]);
        }

        /**
         * Get "table_names" list of values
         *
         * @return \string[]
         */
        public function getTableNamesList()
        {
            return $this->table_names;
        }

        /**
         * @deprecated Use setTableNamesList($value) instead
         * Set "table_names" value
         * @param \string[] $value
         */
        public function setTableNames($value)
        {
            return $this->table_names = $value;
        }

        /**
         * Set "table_names" list
         * @param \string[]|\Traversable $value
         */
         public function setTableNamesList($value)
         {
             return $this->table_names = $value;
         }

        /**
         * Add a new element to "table_names"
         *
         * @param \string $value
         */
        public function addTableNames($value)
        {
            $this->table_names[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class DeleteTableRequest extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.DeleteTableRequest');

                        // required string table_name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_name" has a value
         *
         * @return boolean
         */
        public function hasTableName()
        {
            return isset($this->table_name);
        }

        /**
         * Clear "table_name" value
         */
        public function clearTableName()
        {
            unset($this->table_name);
        }

        
        /**
         * Get "table_name" value
                  * @return \string                  *
         *
         */
        public function getTableName()
        {
                        return $this->table_name;
                    }

        /**
         * Set "table_name" value
         *
         * @param \string $value
         */
        public function setTableName($value)
        {
            return $this->table_name = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class DeleteTableResponse extends \DrSlump\Protobuf\Message {
             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.DeleteTableResponse');

            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class GetRowRequest extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.GetRowRequest');

                        // required string table_name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // repeated message primary_key = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "primary_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
                        // repeated string columns_to_get = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "columns_to_get";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_name" has a value
         *
         * @return boolean
         */
        public function hasTableName()
        {
            return isset($this->table_name);
        }

        /**
         * Clear "table_name" value
         */
        public function clearTableName()
        {
            unset($this->table_name);
        }

        
        /**
         * Get "table_name" value
                  * @return \string                  *
         *
         */
        public function getTableName()
        {
                        return $this->table_name;
                    }

        /**
         * Set "table_name" value
         *
         * @param \string $value
         */
        public function setTableName($value)
        {
            return $this->table_name = $value;
        }

        
                
        /**
         * Check if "primary_key" has a value
         *
         * @return boolean
         */
        public function hasPrimaryKey()
        {
            return isset($this->primary_key);
        }

        /**
         * Clear "primary_key" value
         */
        public function clearPrimaryKey()
        {
            unset($this->primary_key);
        }

        
        /**
         * Get "primary_key" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKey($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->primary_key)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->primary_key[$idx]);
        }

        /**
         * Get "primary_key" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKeyList()
        {
            return $this->primary_key;
        }

        /**
         * @deprecated Use setPrimaryKeyList($value) instead
         * Set "primary_key" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setPrimaryKey($value)
        {
            return $this->primary_key = $value;
        }

        /**
         * Set "primary_key" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setPrimaryKeyList($value)
         {
             return $this->primary_key = $value;
         }

        /**
         * Add a new element to "primary_key"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addPrimaryKey($value)
        {
            $this->primary_key[] = $value;
        }

        
                
        /**
         * Check if "columns_to_get" has a value
         *
         * @return boolean
         */
        public function hasColumnsToGet()
        {
            return isset($this->columns_to_get);
        }

        /**
         * Clear "columns_to_get" value
         */
        public function clearColumnsToGet()
        {
            unset($this->columns_to_get);
        }

        
        /**
         * Get "columns_to_get" value
         *
         * @return \PhpOption\Option of type \string[]
         */
        public function getColumnsToGet($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->columns_to_get)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->columns_to_get[$idx]);
        }

        /**
         * Get "columns_to_get" list of values
         *
         * @return \string[]
         */
        public function getColumnsToGetList()
        {
            return $this->columns_to_get;
        }

        /**
         * @deprecated Use setColumnsToGetList($value) instead
         * Set "columns_to_get" value
         * @param \string[] $value
         */
        public function setColumnsToGet($value)
        {
            return $this->columns_to_get = $value;
        }

        /**
         * Set "columns_to_get" list
         * @param \string[]|\Traversable $value
         */
         public function setColumnsToGetList($value)
         {
             return $this->columns_to_get = $value;
         }

        /**
         * Add a new element to "columns_to_get"
         *
         * @param \string $value
         */
        public function addColumnsToGet($value)
        {
            $this->columns_to_get[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class GetRowResponse extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.GetRowResponse');

                        // required message consumed = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "consumed";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ConsumedCapacity';

            $descriptor->addField($f);
                        // required message row = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "row";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Row';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "consumed" has a value
         *
         * @return boolean
         */
        public function hasConsumed()
        {
            return isset($this->consumed);
        }

        /**
         * Clear "consumed" value
         */
        public function clearConsumed()
        {
            unset($this->consumed);
        }

        
        /**
         * Get "consumed" value
                  * @return \com\aliyun\cloudservice\ots2\ConsumedCapacity                  *
         *
         */
        public function getConsumed()
        {
                        return $this->consumed;
                    }

        /**
         * Set "consumed" value
         *
         * @param \com\aliyun\cloudservice\ots2\ConsumedCapacity $value
         */
        public function setConsumed($value)
        {
            return $this->consumed = $value;
        }

        
                
        /**
         * Check if "row" has a value
         *
         * @return boolean
         */
        public function hasRow()
        {
            return isset($this->row);
        }

        /**
         * Clear "row" value
         */
        public function clearRow()
        {
            unset($this->row);
        }

        
        /**
         * Get "row" value
                  * @return \com\aliyun\cloudservice\ots2\Row                  *
         *
         */
        public function getRow()
        {
                        return $this->row;
                    }

        /**
         * Set "row" value
         *
         * @param \com\aliyun\cloudservice\ots2\Row $value
         */
        public function setRow($value)
        {
            return $this->row = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class ColumnUpdate extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.ColumnUpdate');

                        // required enum type = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\OperationType';

            $descriptor->addField($f);
                        // required string name = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // optional message value = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ColumnValue';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "type" has a value
         *
         * @return boolean
         */
        public function hasType()
        {
            return isset($this->type);
        }

        /**
         * Clear "type" value
         */
        public function clearType()
        {
            unset($this->type);
        }

        
        /**
         * Get "type" value
                  * @return \int - com\aliyun\cloudservice\ots2\OperationType                  *
         *
         */
        public function getType()
        {
                        return $this->type;
                    }

        /**
         * Set "type" value
         *
         * @param \int - com\aliyun\cloudservice\ots2\OperationType $value
         */
        public function setType($value)
        {
            return $this->type = $value;
        }

        
                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
                  * @return \string                  *
         *
         */
        public function getName()
        {
                        return $this->name;
                    }

        /**
         * Set "name" value
         *
         * @param \string $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        
                
        /**
         * Check if "value" has a value
         *
         * @return boolean
         */
        public function hasValue()
        {
            return isset($this->value);
        }

        /**
         * Clear "value" value
         */
        public function clearValue()
        {
            unset($this->value);
        }

        
        /**
         * Get "value" value
                  * @return \PhpOption\Option of type (\com\aliyun\cloudservice\ots2\ColumnValue)
                  *
         *
         */
        public function getValue()
        {
                        return \PhpOption\Option::fromValue($this->value);
                    }

        /**
         * Set "value" value
         *
         * @param \com\aliyun\cloudservice\ots2\ColumnValue $value
         */
        public function setValue($value)
        {
            return $this->value = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class UpdateRowRequest extends \DrSlump\Protobuf\Message {
                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.UpdateRowRequest');

                        // required string table_name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // required message condition = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "condition";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Condition';

            $descriptor->addField($f);
                        // repeated message primary_key = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "primary_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
                        // repeated message attribute_columns = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "attribute_columns";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ColumnUpdate';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_name" has a value
         *
         * @return boolean
         */
        public function hasTableName()
        {
            return isset($this->table_name);
        }

        /**
         * Clear "table_name" value
         */
        public function clearTableName()
        {
            unset($this->table_name);
        }

        
        /**
         * Get "table_name" value
                  * @return \string                  *
         *
         */
        public function getTableName()
        {
                        return $this->table_name;
                    }

        /**
         * Set "table_name" value
         *
         * @param \string $value
         */
        public function setTableName($value)
        {
            return $this->table_name = $value;
        }

        
                
        /**
         * Check if "condition" has a value
         *
         * @return boolean
         */
        public function hasCondition()
        {
            return isset($this->condition);
        }

        /**
         * Clear "condition" value
         */
        public function clearCondition()
        {
            unset($this->condition);
        }

        
        /**
         * Get "condition" value
                  * @return \com\aliyun\cloudservice\ots2\Condition                  *
         *
         */
        public function getCondition()
        {
                        return $this->condition;
                    }

        /**
         * Set "condition" value
         *
         * @param \com\aliyun\cloudservice\ots2\Condition $value
         */
        public function setCondition($value)
        {
            return $this->condition = $value;
        }

        
                
        /**
         * Check if "primary_key" has a value
         *
         * @return boolean
         */
        public function hasPrimaryKey()
        {
            return isset($this->primary_key);
        }

        /**
         * Clear "primary_key" value
         */
        public function clearPrimaryKey()
        {
            unset($this->primary_key);
        }

        
        /**
         * Get "primary_key" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKey($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->primary_key)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->primary_key[$idx]);
        }

        /**
         * Get "primary_key" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKeyList()
        {
            return $this->primary_key;
        }

        /**
         * @deprecated Use setPrimaryKeyList($value) instead
         * Set "primary_key" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setPrimaryKey($value)
        {
            return $this->primary_key = $value;
        }

        /**
         * Set "primary_key" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setPrimaryKeyList($value)
         {
             return $this->primary_key = $value;
         }

        /**
         * Add a new element to "primary_key"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addPrimaryKey($value)
        {
            $this->primary_key[] = $value;
        }

        
                
        /**
         * Check if "attribute_columns" has a value
         *
         * @return boolean
         */
        public function hasAttributeColumns()
        {
            return isset($this->attribute_columns);
        }

        /**
         * Clear "attribute_columns" value
         */
        public function clearAttributeColumns()
        {
            unset($this->attribute_columns);
        }

        
        /**
         * Get "attribute_columns" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\ColumnUpdate[]
         */
        public function getAttributeColumns($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->attribute_columns)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->attribute_columns[$idx]);
        }

        /**
         * Get "attribute_columns" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\ColumnUpdate[]
         */
        public function getAttributeColumnsList()
        {
            return $this->attribute_columns;
        }

        /**
         * @deprecated Use setAttributeColumnsList($value) instead
         * Set "attribute_columns" value
         * @param \com\aliyun\cloudservice\ots2\ColumnUpdate[] $value
         */
        public function setAttributeColumns($value)
        {
            return $this->attribute_columns = $value;
        }

        /**
         * Set "attribute_columns" list
         * @param \com\aliyun\cloudservice\ots2\ColumnUpdate[]|\Traversable $value
         */
         public function setAttributeColumnsList($value)
         {
             return $this->attribute_columns = $value;
         }

        /**
         * Add a new element to "attribute_columns"
         *
         * @param \com\aliyun\cloudservice\ots2\ColumnUpdate $value
         */
        public function addAttributeColumns($value)
        {
            $this->attribute_columns[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class UpdateRowResponse extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.UpdateRowResponse');

                        // required message consumed = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "consumed";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ConsumedCapacity';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "consumed" has a value
         *
         * @return boolean
         */
        public function hasConsumed()
        {
            return isset($this->consumed);
        }

        /**
         * Clear "consumed" value
         */
        public function clearConsumed()
        {
            unset($this->consumed);
        }

        
        /**
         * Get "consumed" value
                  * @return \com\aliyun\cloudservice\ots2\ConsumedCapacity                  *
         *
         */
        public function getConsumed()
        {
                        return $this->consumed;
                    }

        /**
         * Set "consumed" value
         *
         * @param \com\aliyun\cloudservice\ots2\ConsumedCapacity $value
         */
        public function setConsumed($value)
        {
            return $this->consumed = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class PutRowRequest extends \DrSlump\Protobuf\Message {
                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.PutRowRequest');

                        // required string table_name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // required message condition = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "condition";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Condition';

            $descriptor->addField($f);
                        // repeated message primary_key = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "primary_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
                        // repeated message attribute_columns = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "attribute_columns";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_name" has a value
         *
         * @return boolean
         */
        public function hasTableName()
        {
            return isset($this->table_name);
        }

        /**
         * Clear "table_name" value
         */
        public function clearTableName()
        {
            unset($this->table_name);
        }

        
        /**
         * Get "table_name" value
                  * @return \string                  *
         *
         */
        public function getTableName()
        {
                        return $this->table_name;
                    }

        /**
         * Set "table_name" value
         *
         * @param \string $value
         */
        public function setTableName($value)
        {
            return $this->table_name = $value;
        }

        
                
        /**
         * Check if "condition" has a value
         *
         * @return boolean
         */
        public function hasCondition()
        {
            return isset($this->condition);
        }

        /**
         * Clear "condition" value
         */
        public function clearCondition()
        {
            unset($this->condition);
        }

        
        /**
         * Get "condition" value
                  * @return \com\aliyun\cloudservice\ots2\Condition                  *
         *
         */
        public function getCondition()
        {
                        return $this->condition;
                    }

        /**
         * Set "condition" value
         *
         * @param \com\aliyun\cloudservice\ots2\Condition $value
         */
        public function setCondition($value)
        {
            return $this->condition = $value;
        }

        
                
        /**
         * Check if "primary_key" has a value
         *
         * @return boolean
         */
        public function hasPrimaryKey()
        {
            return isset($this->primary_key);
        }

        /**
         * Clear "primary_key" value
         */
        public function clearPrimaryKey()
        {
            unset($this->primary_key);
        }

        
        /**
         * Get "primary_key" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKey($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->primary_key)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->primary_key[$idx]);
        }

        /**
         * Get "primary_key" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKeyList()
        {
            return $this->primary_key;
        }

        /**
         * @deprecated Use setPrimaryKeyList($value) instead
         * Set "primary_key" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setPrimaryKey($value)
        {
            return $this->primary_key = $value;
        }

        /**
         * Set "primary_key" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setPrimaryKeyList($value)
         {
             return $this->primary_key = $value;
         }

        /**
         * Add a new element to "primary_key"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addPrimaryKey($value)
        {
            $this->primary_key[] = $value;
        }

        
                
        /**
         * Check if "attribute_columns" has a value
         *
         * @return boolean
         */
        public function hasAttributeColumns()
        {
            return isset($this->attribute_columns);
        }

        /**
         * Clear "attribute_columns" value
         */
        public function clearAttributeColumns()
        {
            unset($this->attribute_columns);
        }

        
        /**
         * Get "attribute_columns" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getAttributeColumns($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->attribute_columns)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->attribute_columns[$idx]);
        }

        /**
         * Get "attribute_columns" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getAttributeColumnsList()
        {
            return $this->attribute_columns;
        }

        /**
         * @deprecated Use setAttributeColumnsList($value) instead
         * Set "attribute_columns" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setAttributeColumns($value)
        {
            return $this->attribute_columns = $value;
        }

        /**
         * Set "attribute_columns" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setAttributeColumnsList($value)
         {
             return $this->attribute_columns = $value;
         }

        /**
         * Add a new element to "attribute_columns"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addAttributeColumns($value)
        {
            $this->attribute_columns[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class PutRowResponse extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.PutRowResponse');

                        // required message consumed = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "consumed";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ConsumedCapacity';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "consumed" has a value
         *
         * @return boolean
         */
        public function hasConsumed()
        {
            return isset($this->consumed);
        }

        /**
         * Clear "consumed" value
         */
        public function clearConsumed()
        {
            unset($this->consumed);
        }

        
        /**
         * Get "consumed" value
                  * @return \com\aliyun\cloudservice\ots2\ConsumedCapacity                  *
         *
         */
        public function getConsumed()
        {
                        return $this->consumed;
                    }

        /**
         * Set "consumed" value
         *
         * @param \com\aliyun\cloudservice\ots2\ConsumedCapacity $value
         */
        public function setConsumed($value)
        {
            return $this->consumed = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class DeleteRowRequest extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.DeleteRowRequest');

                        // required string table_name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // required message condition = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "condition";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Condition';

            $descriptor->addField($f);
                        // repeated message primary_key = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "primary_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_name" has a value
         *
         * @return boolean
         */
        public function hasTableName()
        {
            return isset($this->table_name);
        }

        /**
         * Clear "table_name" value
         */
        public function clearTableName()
        {
            unset($this->table_name);
        }

        
        /**
         * Get "table_name" value
                  * @return \string                  *
         *
         */
        public function getTableName()
        {
                        return $this->table_name;
                    }

        /**
         * Set "table_name" value
         *
         * @param \string $value
         */
        public function setTableName($value)
        {
            return $this->table_name = $value;
        }

        
                
        /**
         * Check if "condition" has a value
         *
         * @return boolean
         */
        public function hasCondition()
        {
            return isset($this->condition);
        }

        /**
         * Clear "condition" value
         */
        public function clearCondition()
        {
            unset($this->condition);
        }

        
        /**
         * Get "condition" value
                  * @return \com\aliyun\cloudservice\ots2\Condition                  *
         *
         */
        public function getCondition()
        {
                        return $this->condition;
                    }

        /**
         * Set "condition" value
         *
         * @param \com\aliyun\cloudservice\ots2\Condition $value
         */
        public function setCondition($value)
        {
            return $this->condition = $value;
        }

        
                
        /**
         * Check if "primary_key" has a value
         *
         * @return boolean
         */
        public function hasPrimaryKey()
        {
            return isset($this->primary_key);
        }

        /**
         * Clear "primary_key" value
         */
        public function clearPrimaryKey()
        {
            unset($this->primary_key);
        }

        
        /**
         * Get "primary_key" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKey($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->primary_key)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->primary_key[$idx]);
        }

        /**
         * Get "primary_key" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKeyList()
        {
            return $this->primary_key;
        }

        /**
         * @deprecated Use setPrimaryKeyList($value) instead
         * Set "primary_key" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setPrimaryKey($value)
        {
            return $this->primary_key = $value;
        }

        /**
         * Set "primary_key" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setPrimaryKeyList($value)
         {
             return $this->primary_key = $value;
         }

        /**
         * Add a new element to "primary_key"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addPrimaryKey($value)
        {
            $this->primary_key[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class DeleteRowResponse extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.DeleteRowResponse');

                        // required message consumed = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "consumed";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ConsumedCapacity';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "consumed" has a value
         *
         * @return boolean
         */
        public function hasConsumed()
        {
            return isset($this->consumed);
        }

        /**
         * Clear "consumed" value
         */
        public function clearConsumed()
        {
            unset($this->consumed);
        }

        
        /**
         * Get "consumed" value
                  * @return \com\aliyun\cloudservice\ots2\ConsumedCapacity                  *
         *
         */
        public function getConsumed()
        {
                        return $this->consumed;
                    }

        /**
         * Set "consumed" value
         *
         * @param \com\aliyun\cloudservice\ots2\ConsumedCapacity $value
         */
        public function setConsumed($value)
        {
            return $this->consumed = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class RowInBatchGetRowRequest extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.RowInBatchGetRowRequest');

                        // repeated message primary_key = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "primary_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "primary_key" has a value
         *
         * @return boolean
         */
        public function hasPrimaryKey()
        {
            return isset($this->primary_key);
        }

        /**
         * Clear "primary_key" value
         */
        public function clearPrimaryKey()
        {
            unset($this->primary_key);
        }

        
        /**
         * Get "primary_key" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKey($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->primary_key)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->primary_key[$idx]);
        }

        /**
         * Get "primary_key" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKeyList()
        {
            return $this->primary_key;
        }

        /**
         * @deprecated Use setPrimaryKeyList($value) instead
         * Set "primary_key" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setPrimaryKey($value)
        {
            return $this->primary_key = $value;
        }

        /**
         * Set "primary_key" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setPrimaryKeyList($value)
         {
             return $this->primary_key = $value;
         }

        /**
         * Add a new element to "primary_key"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addPrimaryKey($value)
        {
            $this->primary_key[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class TableInBatchGetRowRequest extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.TableInBatchGetRowRequest');

                        // required string table_name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // repeated message rows = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "rows";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\RowInBatchGetRowRequest';

            $descriptor->addField($f);
                        // repeated string columns_to_get = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "columns_to_get";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_name" has a value
         *
         * @return boolean
         */
        public function hasTableName()
        {
            return isset($this->table_name);
        }

        /**
         * Clear "table_name" value
         */
        public function clearTableName()
        {
            unset($this->table_name);
        }

        
        /**
         * Get "table_name" value
                  * @return \string                  *
         *
         */
        public function getTableName()
        {
                        return $this->table_name;
                    }

        /**
         * Set "table_name" value
         *
         * @param \string $value
         */
        public function setTableName($value)
        {
            return $this->table_name = $value;
        }

        
                
        /**
         * Check if "rows" has a value
         *
         * @return boolean
         */
        public function hasRows()
        {
            return isset($this->rows);
        }

        /**
         * Clear "rows" value
         */
        public function clearRows()
        {
            unset($this->rows);
        }

        
        /**
         * Get "rows" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\RowInBatchGetRowRequest[]
         */
        public function getRows($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->rows)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->rows[$idx]);
        }

        /**
         * Get "rows" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\RowInBatchGetRowRequest[]
         */
        public function getRowsList()
        {
            return $this->rows;
        }

        /**
         * @deprecated Use setRowsList($value) instead
         * Set "rows" value
         * @param \com\aliyun\cloudservice\ots2\RowInBatchGetRowRequest[] $value
         */
        public function setRows($value)
        {
            return $this->rows = $value;
        }

        /**
         * Set "rows" list
         * @param \com\aliyun\cloudservice\ots2\RowInBatchGetRowRequest[]|\Traversable $value
         */
         public function setRowsList($value)
         {
             return $this->rows = $value;
         }

        /**
         * Add a new element to "rows"
         *
         * @param \com\aliyun\cloudservice\ots2\RowInBatchGetRowRequest $value
         */
        public function addRows($value)
        {
            $this->rows[] = $value;
        }

        
                
        /**
         * Check if "columns_to_get" has a value
         *
         * @return boolean
         */
        public function hasColumnsToGet()
        {
            return isset($this->columns_to_get);
        }

        /**
         * Clear "columns_to_get" value
         */
        public function clearColumnsToGet()
        {
            unset($this->columns_to_get);
        }

        
        /**
         * Get "columns_to_get" value
         *
         * @return \PhpOption\Option of type \string[]
         */
        public function getColumnsToGet($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->columns_to_get)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->columns_to_get[$idx]);
        }

        /**
         * Get "columns_to_get" list of values
         *
         * @return \string[]
         */
        public function getColumnsToGetList()
        {
            return $this->columns_to_get;
        }

        /**
         * @deprecated Use setColumnsToGetList($value) instead
         * Set "columns_to_get" value
         * @param \string[] $value
         */
        public function setColumnsToGet($value)
        {
            return $this->columns_to_get = $value;
        }

        /**
         * Set "columns_to_get" list
         * @param \string[]|\Traversable $value
         */
         public function setColumnsToGetList($value)
         {
             return $this->columns_to_get = $value;
         }

        /**
         * Add a new element to "columns_to_get"
         *
         * @param \string $value
         */
        public function addColumnsToGet($value)
        {
            $this->columns_to_get[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class BatchGetRowRequest extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.BatchGetRowRequest');

                        // repeated message tables = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "tables";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\TableInBatchGetRowRequest';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "tables" has a value
         *
         * @return boolean
         */
        public function hasTables()
        {
            return isset($this->tables);
        }

        /**
         * Clear "tables" value
         */
        public function clearTables()
        {
            unset($this->tables);
        }

        
        /**
         * Get "tables" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\TableInBatchGetRowRequest[]
         */
        public function getTables($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->tables)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->tables[$idx]);
        }

        /**
         * Get "tables" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\TableInBatchGetRowRequest[]
         */
        public function getTablesList()
        {
            return $this->tables;
        }

        /**
         * @deprecated Use setTablesList($value) instead
         * Set "tables" value
         * @param \com\aliyun\cloudservice\ots2\TableInBatchGetRowRequest[] $value
         */
        public function setTables($value)
        {
            return $this->tables = $value;
        }

        /**
         * Set "tables" list
         * @param \com\aliyun\cloudservice\ots2\TableInBatchGetRowRequest[]|\Traversable $value
         */
         public function setTablesList($value)
         {
             return $this->tables = $value;
         }

        /**
         * Add a new element to "tables"
         *
         * @param \com\aliyun\cloudservice\ots2\TableInBatchGetRowRequest $value
         */
        public function addTables($value)
        {
            $this->tables[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class RowInBatchGetRowResponse extends \DrSlump\Protobuf\Message {
                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.RowInBatchGetRowResponse');

                        // required bool is_ok = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "is_ok";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;
            
             
            $f->default = true;

            $descriptor->addField($f);
                        // optional message error = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "error";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Error';

            $descriptor->addField($f);
                        // optional message consumed = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "consumed";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ConsumedCapacity';

            $descriptor->addField($f);
                        // optional message row = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "row";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Row';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "is_ok" has a value
         *
         * @return boolean
         */
        public function hasIsOk()
        {
            return isset($this->is_ok);
        }

        /**
         * Clear "is_ok" value
         */
        public function clearIsOk()
        {
            unset($this->is_ok);
        }

        
        /**
         * Get "is_ok" value
                  * @return \boolean                  *
         *
         */
        public function getIsOk()
        {
                        return $this->is_ok;
                    }

        /**
         * Set "is_ok" value
         *
         * @param \boolean $value
         */
        public function setIsOk($value)
        {
            return $this->is_ok = $value;
        }

        
                
        /**
         * Check if "error" has a value
         *
         * @return boolean
         */
        public function hasError()
        {
            return isset($this->error);
        }

        /**
         * Clear "error" value
         */
        public function clearError()
        {
            unset($this->error);
        }

        
        /**
         * Get "error" value
                  * @return \PhpOption\Option of type (\com\aliyun\cloudservice\ots2\Error)
                  *
         *
         */
        public function getError()
        {
                        return \PhpOption\Option::fromValue($this->error);
                    }

        /**
         * Set "error" value
         *
         * @param \com\aliyun\cloudservice\ots2\Error $value
         */
        public function setError($value)
        {
            return $this->error = $value;
        }

        
                
        /**
         * Check if "consumed" has a value
         *
         * @return boolean
         */
        public function hasConsumed()
        {
            return isset($this->consumed);
        }

        /**
         * Clear "consumed" value
         */
        public function clearConsumed()
        {
            unset($this->consumed);
        }

        
        /**
         * Get "consumed" value
                  * @return \PhpOption\Option of type (\com\aliyun\cloudservice\ots2\ConsumedCapacity)
                  *
         *
         */
        public function getConsumed()
        {
                        return \PhpOption\Option::fromValue($this->consumed);
                    }

        /**
         * Set "consumed" value
         *
         * @param \com\aliyun\cloudservice\ots2\ConsumedCapacity $value
         */
        public function setConsumed($value)
        {
            return $this->consumed = $value;
        }

        
                
        /**
         * Check if "row" has a value
         *
         * @return boolean
         */
        public function hasRow()
        {
            return isset($this->row);
        }

        /**
         * Clear "row" value
         */
        public function clearRow()
        {
            unset($this->row);
        }

        
        /**
         * Get "row" value
                  * @return \PhpOption\Option of type (\com\aliyun\cloudservice\ots2\Row)
                  *
         *
         */
        public function getRow()
        {
                        return \PhpOption\Option::fromValue($this->row);
                    }

        /**
         * Set "row" value
         *
         * @param \com\aliyun\cloudservice\ots2\Row $value
         */
        public function setRow($value)
        {
            return $this->row = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class TableInBatchGetRowResponse extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.TableInBatchGetRowResponse');

                        // required string table_name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // repeated message rows = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "rows";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\RowInBatchGetRowResponse';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_name" has a value
         *
         * @return boolean
         */
        public function hasTableName()
        {
            return isset($this->table_name);
        }

        /**
         * Clear "table_name" value
         */
        public function clearTableName()
        {
            unset($this->table_name);
        }

        
        /**
         * Get "table_name" value
                  * @return \string                  *
         *
         */
        public function getTableName()
        {
                        return $this->table_name;
                    }

        /**
         * Set "table_name" value
         *
         * @param \string $value
         */
        public function setTableName($value)
        {
            return $this->table_name = $value;
        }

        
                
        /**
         * Check if "rows" has a value
         *
         * @return boolean
         */
        public function hasRows()
        {
            return isset($this->rows);
        }

        /**
         * Clear "rows" value
         */
        public function clearRows()
        {
            unset($this->rows);
        }

        
        /**
         * Get "rows" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\RowInBatchGetRowResponse[]
         */
        public function getRows($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->rows)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->rows[$idx]);
        }

        /**
         * Get "rows" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\RowInBatchGetRowResponse[]
         */
        public function getRowsList()
        {
            return $this->rows;
        }

        /**
         * @deprecated Use setRowsList($value) instead
         * Set "rows" value
         * @param \com\aliyun\cloudservice\ots2\RowInBatchGetRowResponse[] $value
         */
        public function setRows($value)
        {
            return $this->rows = $value;
        }

        /**
         * Set "rows" list
         * @param \com\aliyun\cloudservice\ots2\RowInBatchGetRowResponse[]|\Traversable $value
         */
         public function setRowsList($value)
         {
             return $this->rows = $value;
         }

        /**
         * Add a new element to "rows"
         *
         * @param \com\aliyun\cloudservice\ots2\RowInBatchGetRowResponse $value
         */
        public function addRows($value)
        {
            $this->rows[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class BatchGetRowResponse extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.BatchGetRowResponse');

                        // repeated message tables = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "tables";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\TableInBatchGetRowResponse';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "tables" has a value
         *
         * @return boolean
         */
        public function hasTables()
        {
            return isset($this->tables);
        }

        /**
         * Clear "tables" value
         */
        public function clearTables()
        {
            unset($this->tables);
        }

        
        /**
         * Get "tables" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\TableInBatchGetRowResponse[]
         */
        public function getTables($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->tables)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->tables[$idx]);
        }

        /**
         * Get "tables" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\TableInBatchGetRowResponse[]
         */
        public function getTablesList()
        {
            return $this->tables;
        }

        /**
         * @deprecated Use setTablesList($value) instead
         * Set "tables" value
         * @param \com\aliyun\cloudservice\ots2\TableInBatchGetRowResponse[] $value
         */
        public function setTables($value)
        {
            return $this->tables = $value;
        }

        /**
         * Set "tables" list
         * @param \com\aliyun\cloudservice\ots2\TableInBatchGetRowResponse[]|\Traversable $value
         */
         public function setTablesList($value)
         {
             return $this->tables = $value;
         }

        /**
         * Add a new element to "tables"
         *
         * @param \com\aliyun\cloudservice\ots2\TableInBatchGetRowResponse $value
         */
        public function addTables($value)
        {
            $this->tables[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class PutRowInBatchWriteRowRequest extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.PutRowInBatchWriteRowRequest');

                        // required message condition = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "condition";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Condition';

            $descriptor->addField($f);
                        // repeated message primary_key = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "primary_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
                        // repeated message attribute_columns = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "attribute_columns";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "condition" has a value
         *
         * @return boolean
         */
        public function hasCondition()
        {
            return isset($this->condition);
        }

        /**
         * Clear "condition" value
         */
        public function clearCondition()
        {
            unset($this->condition);
        }

        
        /**
         * Get "condition" value
                  * @return \com\aliyun\cloudservice\ots2\Condition                  *
         *
         */
        public function getCondition()
        {
                        return $this->condition;
                    }

        /**
         * Set "condition" value
         *
         * @param \com\aliyun\cloudservice\ots2\Condition $value
         */
        public function setCondition($value)
        {
            return $this->condition = $value;
        }

        
                
        /**
         * Check if "primary_key" has a value
         *
         * @return boolean
         */
        public function hasPrimaryKey()
        {
            return isset($this->primary_key);
        }

        /**
         * Clear "primary_key" value
         */
        public function clearPrimaryKey()
        {
            unset($this->primary_key);
        }

        
        /**
         * Get "primary_key" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKey($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->primary_key)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->primary_key[$idx]);
        }

        /**
         * Get "primary_key" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKeyList()
        {
            return $this->primary_key;
        }

        /**
         * @deprecated Use setPrimaryKeyList($value) instead
         * Set "primary_key" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setPrimaryKey($value)
        {
            return $this->primary_key = $value;
        }

        /**
         * Set "primary_key" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setPrimaryKeyList($value)
         {
             return $this->primary_key = $value;
         }

        /**
         * Add a new element to "primary_key"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addPrimaryKey($value)
        {
            $this->primary_key[] = $value;
        }

        
                
        /**
         * Check if "attribute_columns" has a value
         *
         * @return boolean
         */
        public function hasAttributeColumns()
        {
            return isset($this->attribute_columns);
        }

        /**
         * Clear "attribute_columns" value
         */
        public function clearAttributeColumns()
        {
            unset($this->attribute_columns);
        }

        
        /**
         * Get "attribute_columns" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getAttributeColumns($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->attribute_columns)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->attribute_columns[$idx]);
        }

        /**
         * Get "attribute_columns" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getAttributeColumnsList()
        {
            return $this->attribute_columns;
        }

        /**
         * @deprecated Use setAttributeColumnsList($value) instead
         * Set "attribute_columns" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setAttributeColumns($value)
        {
            return $this->attribute_columns = $value;
        }

        /**
         * Set "attribute_columns" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setAttributeColumnsList($value)
         {
             return $this->attribute_columns = $value;
         }

        /**
         * Add a new element to "attribute_columns"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addAttributeColumns($value)
        {
            $this->attribute_columns[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class UpdateRowInBatchWriteRowRequest extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.UpdateRowInBatchWriteRowRequest');

                        // required message condition = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "condition";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Condition';

            $descriptor->addField($f);
                        // repeated message primary_key = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "primary_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
                        // repeated message attribute_columns = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "attribute_columns";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ColumnUpdate';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "condition" has a value
         *
         * @return boolean
         */
        public function hasCondition()
        {
            return isset($this->condition);
        }

        /**
         * Clear "condition" value
         */
        public function clearCondition()
        {
            unset($this->condition);
        }

        
        /**
         * Get "condition" value
                  * @return \com\aliyun\cloudservice\ots2\Condition                  *
         *
         */
        public function getCondition()
        {
                        return $this->condition;
                    }

        /**
         * Set "condition" value
         *
         * @param \com\aliyun\cloudservice\ots2\Condition $value
         */
        public function setCondition($value)
        {
            return $this->condition = $value;
        }

        
                
        /**
         * Check if "primary_key" has a value
         *
         * @return boolean
         */
        public function hasPrimaryKey()
        {
            return isset($this->primary_key);
        }

        /**
         * Clear "primary_key" value
         */
        public function clearPrimaryKey()
        {
            unset($this->primary_key);
        }

        
        /**
         * Get "primary_key" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKey($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->primary_key)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->primary_key[$idx]);
        }

        /**
         * Get "primary_key" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKeyList()
        {
            return $this->primary_key;
        }

        /**
         * @deprecated Use setPrimaryKeyList($value) instead
         * Set "primary_key" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setPrimaryKey($value)
        {
            return $this->primary_key = $value;
        }

        /**
         * Set "primary_key" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setPrimaryKeyList($value)
         {
             return $this->primary_key = $value;
         }

        /**
         * Add a new element to "primary_key"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addPrimaryKey($value)
        {
            $this->primary_key[] = $value;
        }

        
                
        /**
         * Check if "attribute_columns" has a value
         *
         * @return boolean
         */
        public function hasAttributeColumns()
        {
            return isset($this->attribute_columns);
        }

        /**
         * Clear "attribute_columns" value
         */
        public function clearAttributeColumns()
        {
            unset($this->attribute_columns);
        }

        
        /**
         * Get "attribute_columns" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\ColumnUpdate[]
         */
        public function getAttributeColumns($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->attribute_columns)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->attribute_columns[$idx]);
        }

        /**
         * Get "attribute_columns" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\ColumnUpdate[]
         */
        public function getAttributeColumnsList()
        {
            return $this->attribute_columns;
        }

        /**
         * @deprecated Use setAttributeColumnsList($value) instead
         * Set "attribute_columns" value
         * @param \com\aliyun\cloudservice\ots2\ColumnUpdate[] $value
         */
        public function setAttributeColumns($value)
        {
            return $this->attribute_columns = $value;
        }

        /**
         * Set "attribute_columns" list
         * @param \com\aliyun\cloudservice\ots2\ColumnUpdate[]|\Traversable $value
         */
         public function setAttributeColumnsList($value)
         {
             return $this->attribute_columns = $value;
         }

        /**
         * Add a new element to "attribute_columns"
         *
         * @param \com\aliyun\cloudservice\ots2\ColumnUpdate $value
         */
        public function addAttributeColumns($value)
        {
            $this->attribute_columns[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class DeleteRowInBatchWriteRowRequest extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.DeleteRowInBatchWriteRowRequest');

                        // required message condition = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "condition";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Condition';

            $descriptor->addField($f);
                        // repeated message primary_key = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "primary_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "condition" has a value
         *
         * @return boolean
         */
        public function hasCondition()
        {
            return isset($this->condition);
        }

        /**
         * Clear "condition" value
         */
        public function clearCondition()
        {
            unset($this->condition);
        }

        
        /**
         * Get "condition" value
                  * @return \com\aliyun\cloudservice\ots2\Condition                  *
         *
         */
        public function getCondition()
        {
                        return $this->condition;
                    }

        /**
         * Set "condition" value
         *
         * @param \com\aliyun\cloudservice\ots2\Condition $value
         */
        public function setCondition($value)
        {
            return $this->condition = $value;
        }

        
                
        /**
         * Check if "primary_key" has a value
         *
         * @return boolean
         */
        public function hasPrimaryKey()
        {
            return isset($this->primary_key);
        }

        /**
         * Clear "primary_key" value
         */
        public function clearPrimaryKey()
        {
            unset($this->primary_key);
        }

        
        /**
         * Get "primary_key" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKey($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->primary_key)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->primary_key[$idx]);
        }

        /**
         * Get "primary_key" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getPrimaryKeyList()
        {
            return $this->primary_key;
        }

        /**
         * @deprecated Use setPrimaryKeyList($value) instead
         * Set "primary_key" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setPrimaryKey($value)
        {
            return $this->primary_key = $value;
        }

        /**
         * Set "primary_key" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setPrimaryKeyList($value)
         {
             return $this->primary_key = $value;
         }

        /**
         * Add a new element to "primary_key"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addPrimaryKey($value)
        {
            $this->primary_key[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class TableInBatchWriteRowRequest extends \DrSlump\Protobuf\Message {
                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.TableInBatchWriteRowRequest');

                        // required string table_name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // repeated message put_rows = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "put_rows";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\PutRowInBatchWriteRowRequest';

            $descriptor->addField($f);
                        // repeated message update_rows = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "update_rows";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\UpdateRowInBatchWriteRowRequest';

            $descriptor->addField($f);
                        // repeated message delete_rows = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "delete_rows";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\DeleteRowInBatchWriteRowRequest';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_name" has a value
         *
         * @return boolean
         */
        public function hasTableName()
        {
            return isset($this->table_name);
        }

        /**
         * Clear "table_name" value
         */
        public function clearTableName()
        {
            unset($this->table_name);
        }

        
        /**
         * Get "table_name" value
                  * @return \string                  *
         *
         */
        public function getTableName()
        {
                        return $this->table_name;
                    }

        /**
         * Set "table_name" value
         *
         * @param \string $value
         */
        public function setTableName($value)
        {
            return $this->table_name = $value;
        }

        
                
        /**
         * Check if "put_rows" has a value
         *
         * @return boolean
         */
        public function hasPutRows()
        {
            return isset($this->put_rows);
        }

        /**
         * Clear "put_rows" value
         */
        public function clearPutRows()
        {
            unset($this->put_rows);
        }

        
        /**
         * Get "put_rows" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\PutRowInBatchWriteRowRequest[]
         */
        public function getPutRows($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->put_rows)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->put_rows[$idx]);
        }

        /**
         * Get "put_rows" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\PutRowInBatchWriteRowRequest[]
         */
        public function getPutRowsList()
        {
            return $this->put_rows;
        }

        /**
         * @deprecated Use setPutRowsList($value) instead
         * Set "put_rows" value
         * @param \com\aliyun\cloudservice\ots2\PutRowInBatchWriteRowRequest[] $value
         */
        public function setPutRows($value)
        {
            return $this->put_rows = $value;
        }

        /**
         * Set "put_rows" list
         * @param \com\aliyun\cloudservice\ots2\PutRowInBatchWriteRowRequest[]|\Traversable $value
         */
         public function setPutRowsList($value)
         {
             return $this->put_rows = $value;
         }

        /**
         * Add a new element to "put_rows"
         *
         * @param \com\aliyun\cloudservice\ots2\PutRowInBatchWriteRowRequest $value
         */
        public function addPutRows($value)
        {
            $this->put_rows[] = $value;
        }

        
                
        /**
         * Check if "update_rows" has a value
         *
         * @return boolean
         */
        public function hasUpdateRows()
        {
            return isset($this->update_rows);
        }

        /**
         * Clear "update_rows" value
         */
        public function clearUpdateRows()
        {
            unset($this->update_rows);
        }

        
        /**
         * Get "update_rows" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\UpdateRowInBatchWriteRowRequest[]
         */
        public function getUpdateRows($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->update_rows)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->update_rows[$idx]);
        }

        /**
         * Get "update_rows" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\UpdateRowInBatchWriteRowRequest[]
         */
        public function getUpdateRowsList()
        {
            return $this->update_rows;
        }

        /**
         * @deprecated Use setUpdateRowsList($value) instead
         * Set "update_rows" value
         * @param \com\aliyun\cloudservice\ots2\UpdateRowInBatchWriteRowRequest[] $value
         */
        public function setUpdateRows($value)
        {
            return $this->update_rows = $value;
        }

        /**
         * Set "update_rows" list
         * @param \com\aliyun\cloudservice\ots2\UpdateRowInBatchWriteRowRequest[]|\Traversable $value
         */
         public function setUpdateRowsList($value)
         {
             return $this->update_rows = $value;
         }

        /**
         * Add a new element to "update_rows"
         *
         * @param \com\aliyun\cloudservice\ots2\UpdateRowInBatchWriteRowRequest $value
         */
        public function addUpdateRows($value)
        {
            $this->update_rows[] = $value;
        }

        
                
        /**
         * Check if "delete_rows" has a value
         *
         * @return boolean
         */
        public function hasDeleteRows()
        {
            return isset($this->delete_rows);
        }

        /**
         * Clear "delete_rows" value
         */
        public function clearDeleteRows()
        {
            unset($this->delete_rows);
        }

        
        /**
         * Get "delete_rows" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\DeleteRowInBatchWriteRowRequest[]
         */
        public function getDeleteRows($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->delete_rows)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->delete_rows[$idx]);
        }

        /**
         * Get "delete_rows" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\DeleteRowInBatchWriteRowRequest[]
         */
        public function getDeleteRowsList()
        {
            return $this->delete_rows;
        }

        /**
         * @deprecated Use setDeleteRowsList($value) instead
         * Set "delete_rows" value
         * @param \com\aliyun\cloudservice\ots2\DeleteRowInBatchWriteRowRequest[] $value
         */
        public function setDeleteRows($value)
        {
            return $this->delete_rows = $value;
        }

        /**
         * Set "delete_rows" list
         * @param \com\aliyun\cloudservice\ots2\DeleteRowInBatchWriteRowRequest[]|\Traversable $value
         */
         public function setDeleteRowsList($value)
         {
             return $this->delete_rows = $value;
         }

        /**
         * Add a new element to "delete_rows"
         *
         * @param \com\aliyun\cloudservice\ots2\DeleteRowInBatchWriteRowRequest $value
         */
        public function addDeleteRows($value)
        {
            $this->delete_rows[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class BatchWriteRowRequest extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.BatchWriteRowRequest');

                        // repeated message tables = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "tables";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\TableInBatchWriteRowRequest';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "tables" has a value
         *
         * @return boolean
         */
        public function hasTables()
        {
            return isset($this->tables);
        }

        /**
         * Clear "tables" value
         */
        public function clearTables()
        {
            unset($this->tables);
        }

        
        /**
         * Get "tables" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\TableInBatchWriteRowRequest[]
         */
        public function getTables($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->tables)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->tables[$idx]);
        }

        /**
         * Get "tables" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\TableInBatchWriteRowRequest[]
         */
        public function getTablesList()
        {
            return $this->tables;
        }

        /**
         * @deprecated Use setTablesList($value) instead
         * Set "tables" value
         * @param \com\aliyun\cloudservice\ots2\TableInBatchWriteRowRequest[] $value
         */
        public function setTables($value)
        {
            return $this->tables = $value;
        }

        /**
         * Set "tables" list
         * @param \com\aliyun\cloudservice\ots2\TableInBatchWriteRowRequest[]|\Traversable $value
         */
         public function setTablesList($value)
         {
             return $this->tables = $value;
         }

        /**
         * Add a new element to "tables"
         *
         * @param \com\aliyun\cloudservice\ots2\TableInBatchWriteRowRequest $value
         */
        public function addTables($value)
        {
            $this->tables[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class RowInBatchWriteRowResponse extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.RowInBatchWriteRowResponse');

                        // required bool is_ok = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "is_ok";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;
            
             
            $f->default = true;

            $descriptor->addField($f);
                        // optional message error = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "error";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Error';

            $descriptor->addField($f);
                        // optional message consumed = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "consumed";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ConsumedCapacity';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "is_ok" has a value
         *
         * @return boolean
         */
        public function hasIsOk()
        {
            return isset($this->is_ok);
        }

        /**
         * Clear "is_ok" value
         */
        public function clearIsOk()
        {
            unset($this->is_ok);
        }

        
        /**
         * Get "is_ok" value
                  * @return \boolean                  *
         *
         */
        public function getIsOk()
        {
                        return $this->is_ok;
                    }

        /**
         * Set "is_ok" value
         *
         * @param \boolean $value
         */
        public function setIsOk($value)
        {
            return $this->is_ok = $value;
        }

        
                
        /**
         * Check if "error" has a value
         *
         * @return boolean
         */
        public function hasError()
        {
            return isset($this->error);
        }

        /**
         * Clear "error" value
         */
        public function clearError()
        {
            unset($this->error);
        }

        
        /**
         * Get "error" value
                  * @return \PhpOption\Option of type (\com\aliyun\cloudservice\ots2\Error)
                  *
         *
         */
        public function getError()
        {
                        return \PhpOption\Option::fromValue($this->error);
                    }

        /**
         * Set "error" value
         *
         * @param \com\aliyun\cloudservice\ots2\Error $value
         */
        public function setError($value)
        {
            return $this->error = $value;
        }

        
                
        /**
         * Check if "consumed" has a value
         *
         * @return boolean
         */
        public function hasConsumed()
        {
            return isset($this->consumed);
        }

        /**
         * Clear "consumed" value
         */
        public function clearConsumed()
        {
            unset($this->consumed);
        }

        
        /**
         * Get "consumed" value
                  * @return \PhpOption\Option of type (\com\aliyun\cloudservice\ots2\ConsumedCapacity)
                  *
         *
         */
        public function getConsumed()
        {
                        return \PhpOption\Option::fromValue($this->consumed);
                    }

        /**
         * Set "consumed" value
         *
         * @param \com\aliyun\cloudservice\ots2\ConsumedCapacity $value
         */
        public function setConsumed($value)
        {
            return $this->consumed = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class TableInBatchWriteRowResponse extends \DrSlump\Protobuf\Message {
                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.TableInBatchWriteRowResponse');

                        // required string table_name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // repeated message put_rows = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "put_rows";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse';

            $descriptor->addField($f);
                        // repeated message update_rows = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "update_rows";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse';

            $descriptor->addField($f);
                        // repeated message delete_rows = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "delete_rows";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_name" has a value
         *
         * @return boolean
         */
        public function hasTableName()
        {
            return isset($this->table_name);
        }

        /**
         * Clear "table_name" value
         */
        public function clearTableName()
        {
            unset($this->table_name);
        }

        
        /**
         * Get "table_name" value
                  * @return \string                  *
         *
         */
        public function getTableName()
        {
                        return $this->table_name;
                    }

        /**
         * Set "table_name" value
         *
         * @param \string $value
         */
        public function setTableName($value)
        {
            return $this->table_name = $value;
        }

        
                
        /**
         * Check if "put_rows" has a value
         *
         * @return boolean
         */
        public function hasPutRows()
        {
            return isset($this->put_rows);
        }

        /**
         * Clear "put_rows" value
         */
        public function clearPutRows()
        {
            unset($this->put_rows);
        }

        
        /**
         * Get "put_rows" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse[]
         */
        public function getPutRows($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->put_rows)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->put_rows[$idx]);
        }

        /**
         * Get "put_rows" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse[]
         */
        public function getPutRowsList()
        {
            return $this->put_rows;
        }

        /**
         * @deprecated Use setPutRowsList($value) instead
         * Set "put_rows" value
         * @param \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse[] $value
         */
        public function setPutRows($value)
        {
            return $this->put_rows = $value;
        }

        /**
         * Set "put_rows" list
         * @param \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse[]|\Traversable $value
         */
         public function setPutRowsList($value)
         {
             return $this->put_rows = $value;
         }

        /**
         * Add a new element to "put_rows"
         *
         * @param \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse $value
         */
        public function addPutRows($value)
        {
            $this->put_rows[] = $value;
        }

        
                
        /**
         * Check if "update_rows" has a value
         *
         * @return boolean
         */
        public function hasUpdateRows()
        {
            return isset($this->update_rows);
        }

        /**
         * Clear "update_rows" value
         */
        public function clearUpdateRows()
        {
            unset($this->update_rows);
        }

        
        /**
         * Get "update_rows" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse[]
         */
        public function getUpdateRows($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->update_rows)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->update_rows[$idx]);
        }

        /**
         * Get "update_rows" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse[]
         */
        public function getUpdateRowsList()
        {
            return $this->update_rows;
        }

        /**
         * @deprecated Use setUpdateRowsList($value) instead
         * Set "update_rows" value
         * @param \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse[] $value
         */
        public function setUpdateRows($value)
        {
            return $this->update_rows = $value;
        }

        /**
         * Set "update_rows" list
         * @param \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse[]|\Traversable $value
         */
         public function setUpdateRowsList($value)
         {
             return $this->update_rows = $value;
         }

        /**
         * Add a new element to "update_rows"
         *
         * @param \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse $value
         */
        public function addUpdateRows($value)
        {
            $this->update_rows[] = $value;
        }

        
                
        /**
         * Check if "delete_rows" has a value
         *
         * @return boolean
         */
        public function hasDeleteRows()
        {
            return isset($this->delete_rows);
        }

        /**
         * Clear "delete_rows" value
         */
        public function clearDeleteRows()
        {
            unset($this->delete_rows);
        }

        
        /**
         * Get "delete_rows" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse[]
         */
        public function getDeleteRows($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->delete_rows)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->delete_rows[$idx]);
        }

        /**
         * Get "delete_rows" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse[]
         */
        public function getDeleteRowsList()
        {
            return $this->delete_rows;
        }

        /**
         * @deprecated Use setDeleteRowsList($value) instead
         * Set "delete_rows" value
         * @param \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse[] $value
         */
        public function setDeleteRows($value)
        {
            return $this->delete_rows = $value;
        }

        /**
         * Set "delete_rows" list
         * @param \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse[]|\Traversable $value
         */
         public function setDeleteRowsList($value)
         {
             return $this->delete_rows = $value;
         }

        /**
         * Add a new element to "delete_rows"
         *
         * @param \com\aliyun\cloudservice\ots2\RowInBatchWriteRowResponse $value
         */
        public function addDeleteRows($value)
        {
            $this->delete_rows[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class BatchWriteRowResponse extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.BatchWriteRowResponse');

                        // repeated message tables = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "tables";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\TableInBatchWriteRowResponse';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "tables" has a value
         *
         * @return boolean
         */
        public function hasTables()
        {
            return isset($this->tables);
        }

        /**
         * Clear "tables" value
         */
        public function clearTables()
        {
            unset($this->tables);
        }

        
        /**
         * Get "tables" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\TableInBatchWriteRowResponse[]
         */
        public function getTables($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->tables)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->tables[$idx]);
        }

        /**
         * Get "tables" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\TableInBatchWriteRowResponse[]
         */
        public function getTablesList()
        {
            return $this->tables;
        }

        /**
         * @deprecated Use setTablesList($value) instead
         * Set "tables" value
         * @param \com\aliyun\cloudservice\ots2\TableInBatchWriteRowResponse[] $value
         */
        public function setTables($value)
        {
            return $this->tables = $value;
        }

        /**
         * Set "tables" list
         * @param \com\aliyun\cloudservice\ots2\TableInBatchWriteRowResponse[]|\Traversable $value
         */
         public function setTablesList($value)
         {
             return $this->tables = $value;
         }

        /**
         * Add a new element to "tables"
         *
         * @param \com\aliyun\cloudservice\ots2\TableInBatchWriteRowResponse $value
         */
        public function addTables($value)
        {
            $this->tables[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class GetRangeRequest extends \DrSlump\Protobuf\Message {
                                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.GetRangeRequest');

                        // required string table_name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "table_name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // required enum direction = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "direction";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Direction';

            $descriptor->addField($f);
                        // repeated string columns_to_get = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "columns_to_get";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // optional int32 limit = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "limit";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
                        // repeated message inclusive_start_primary_key = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "inclusive_start_primary_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
                        // repeated message exclusive_end_primary_key = 6 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "exclusive_end_primary_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "table_name" has a value
         *
         * @return boolean
         */
        public function hasTableName()
        {
            return isset($this->table_name);
        }

        /**
         * Clear "table_name" value
         */
        public function clearTableName()
        {
            unset($this->table_name);
        }

        
        /**
         * Get "table_name" value
                  * @return \string                  *
         *
         */
        public function getTableName()
        {
                        return $this->table_name;
                    }

        /**
         * Set "table_name" value
         *
         * @param \string $value
         */
        public function setTableName($value)
        {
            return $this->table_name = $value;
        }

        
                
        /**
         * Check if "direction" has a value
         *
         * @return boolean
         */
        public function hasDirection()
        {
            return isset($this->direction);
        }

        /**
         * Clear "direction" value
         */
        public function clearDirection()
        {
            unset($this->direction);
        }

        
        /**
         * Get "direction" value
                  * @return \int - com\aliyun\cloudservice\ots2\Direction                  *
         *
         */
        public function getDirection()
        {
                        return $this->direction;
                    }

        /**
         * Set "direction" value
         *
         * @param \int - com\aliyun\cloudservice\ots2\Direction $value
         */
        public function setDirection($value)
        {
            return $this->direction = $value;
        }

        
                
        /**
         * Check if "columns_to_get" has a value
         *
         * @return boolean
         */
        public function hasColumnsToGet()
        {
            return isset($this->columns_to_get);
        }

        /**
         * Clear "columns_to_get" value
         */
        public function clearColumnsToGet()
        {
            unset($this->columns_to_get);
        }

        
        /**
         * Get "columns_to_get" value
         *
         * @return \PhpOption\Option of type \string[]
         */
        public function getColumnsToGet($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->columns_to_get)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->columns_to_get[$idx]);
        }

        /**
         * Get "columns_to_get" list of values
         *
         * @return \string[]
         */
        public function getColumnsToGetList()
        {
            return $this->columns_to_get;
        }

        /**
         * @deprecated Use setColumnsToGetList($value) instead
         * Set "columns_to_get" value
         * @param \string[] $value
         */
        public function setColumnsToGet($value)
        {
            return $this->columns_to_get = $value;
        }

        /**
         * Set "columns_to_get" list
         * @param \string[]|\Traversable $value
         */
         public function setColumnsToGetList($value)
         {
             return $this->columns_to_get = $value;
         }

        /**
         * Add a new element to "columns_to_get"
         *
         * @param \string $value
         */
        public function addColumnsToGet($value)
        {
            $this->columns_to_get[] = $value;
        }

        
                
        /**
         * Check if "limit" has a value
         *
         * @return boolean
         */
        public function hasLimit()
        {
            return isset($this->limit);
        }

        /**
         * Clear "limit" value
         */
        public function clearLimit()
        {
            unset($this->limit);
        }

        
        /**
         * Get "limit" value
                  * @return \PhpOption\Option of type (\int)
                  *
         *
         */
        public function getLimit()
        {
                        return \PhpOption\Option::fromValue($this->limit);
                    }

        /**
         * Set "limit" value
         *
         * @param \int $value
         */
        public function setLimit($value)
        {
            return $this->limit = $value;
        }

        
                
        /**
         * Check if "inclusive_start_primary_key" has a value
         *
         * @return boolean
         */
        public function hasInclusiveStartPrimaryKey()
        {
            return isset($this->inclusive_start_primary_key);
        }

        /**
         * Clear "inclusive_start_primary_key" value
         */
        public function clearInclusiveStartPrimaryKey()
        {
            unset($this->inclusive_start_primary_key);
        }

        
        /**
         * Get "inclusive_start_primary_key" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getInclusiveStartPrimaryKey($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->inclusive_start_primary_key)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->inclusive_start_primary_key[$idx]);
        }

        /**
         * Get "inclusive_start_primary_key" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getInclusiveStartPrimaryKeyList()
        {
            return $this->inclusive_start_primary_key;
        }

        /**
         * @deprecated Use setInclusiveStartPrimaryKeyList($value) instead
         * Set "inclusive_start_primary_key" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setInclusiveStartPrimaryKey($value)
        {
            return $this->inclusive_start_primary_key = $value;
        }

        /**
         * Set "inclusive_start_primary_key" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setInclusiveStartPrimaryKeyList($value)
         {
             return $this->inclusive_start_primary_key = $value;
         }

        /**
         * Add a new element to "inclusive_start_primary_key"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addInclusiveStartPrimaryKey($value)
        {
            $this->inclusive_start_primary_key[] = $value;
        }

        
                
        /**
         * Check if "exclusive_end_primary_key" has a value
         *
         * @return boolean
         */
        public function hasExclusiveEndPrimaryKey()
        {
            return isset($this->exclusive_end_primary_key);
        }

        /**
         * Clear "exclusive_end_primary_key" value
         */
        public function clearExclusiveEndPrimaryKey()
        {
            unset($this->exclusive_end_primary_key);
        }

        
        /**
         * Get "exclusive_end_primary_key" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getExclusiveEndPrimaryKey($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->exclusive_end_primary_key)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->exclusive_end_primary_key[$idx]);
        }

        /**
         * Get "exclusive_end_primary_key" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getExclusiveEndPrimaryKeyList()
        {
            return $this->exclusive_end_primary_key;
        }

        /**
         * @deprecated Use setExclusiveEndPrimaryKeyList($value) instead
         * Set "exclusive_end_primary_key" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setExclusiveEndPrimaryKey($value)
        {
            return $this->exclusive_end_primary_key = $value;
        }

        /**
         * Set "exclusive_end_primary_key" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setExclusiveEndPrimaryKeyList($value)
         {
             return $this->exclusive_end_primary_key = $value;
         }

        /**
         * Add a new element to "exclusive_end_primary_key"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addExclusiveEndPrimaryKey($value)
        {
            $this->exclusive_end_primary_key[] = $value;
        }
    }
}


namespace com\aliyun\cloudservice\ots2 {

         
    class GetRangeResponse extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'com.aliyun.cloudservice.ots2.GetRangeResponse');

                        // required message consumed = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "consumed";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\ConsumedCapacity';

            $descriptor->addField($f);
                        // repeated message next_start_primary_key = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "next_start_primary_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Column';

            $descriptor->addField($f);
                        // repeated message rows = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "rows";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\com\aliyun\cloudservice\ots2\Row';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "consumed" has a value
         *
         * @return boolean
         */
        public function hasConsumed()
        {
            return isset($this->consumed);
        }

        /**
         * Clear "consumed" value
         */
        public function clearConsumed()
        {
            unset($this->consumed);
        }

        
        /**
         * Get "consumed" value
                  * @return \com\aliyun\cloudservice\ots2\ConsumedCapacity                  *
         *
         */
        public function getConsumed()
        {
                        return $this->consumed;
                    }

        /**
         * Set "consumed" value
         *
         * @param \com\aliyun\cloudservice\ots2\ConsumedCapacity $value
         */
        public function setConsumed($value)
        {
            return $this->consumed = $value;
        }

        
                
        /**
         * Check if "next_start_primary_key" has a value
         *
         * @return boolean
         */
        public function hasNextStartPrimaryKey()
        {
            return isset($this->next_start_primary_key);
        }

        /**
         * Clear "next_start_primary_key" value
         */
        public function clearNextStartPrimaryKey()
        {
            unset($this->next_start_primary_key);
        }

        
        /**
         * Get "next_start_primary_key" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getNextStartPrimaryKey($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->next_start_primary_key)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->next_start_primary_key[$idx]);
        }

        /**
         * Get "next_start_primary_key" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Column[]
         */
        public function getNextStartPrimaryKeyList()
        {
            return $this->next_start_primary_key;
        }

        /**
         * @deprecated Use setNextStartPrimaryKeyList($value) instead
         * Set "next_start_primary_key" value
         * @param \com\aliyun\cloudservice\ots2\Column[] $value
         */
        public function setNextStartPrimaryKey($value)
        {
            return $this->next_start_primary_key = $value;
        }

        /**
         * Set "next_start_primary_key" list
         * @param \com\aliyun\cloudservice\ots2\Column[]|\Traversable $value
         */
         public function setNextStartPrimaryKeyList($value)
         {
             return $this->next_start_primary_key = $value;
         }

        /**
         * Add a new element to "next_start_primary_key"
         *
         * @param \com\aliyun\cloudservice\ots2\Column $value
         */
        public function addNextStartPrimaryKey($value)
        {
            $this->next_start_primary_key[] = $value;
        }

        
                
        /**
         * Check if "rows" has a value
         *
         * @return boolean
         */
        public function hasRows()
        {
            return isset($this->rows);
        }

        /**
         * Clear "rows" value
         */
        public function clearRows()
        {
            unset($this->rows);
        }

        
        /**
         * Get "rows" value
         *
         * @return \PhpOption\Option of type \com\aliyun\cloudservice\ots2\Row[]
         */
        public function getRows($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->rows)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->rows[$idx]);
        }

        /**
         * Get "rows" list of values
         *
         * @return \com\aliyun\cloudservice\ots2\Row[]
         */
        public function getRowsList()
        {
            return $this->rows;
        }

        /**
         * @deprecated Use setRowsList($value) instead
         * Set "rows" value
         * @param \com\aliyun\cloudservice\ots2\Row[] $value
         */
        public function setRows($value)
        {
            return $this->rows = $value;
        }

        /**
         * Set "rows" list
         * @param \com\aliyun\cloudservice\ots2\Row[]|\Traversable $value
         */
         public function setRowsList($value)
         {
             return $this->rows = $value;
         }

        /**
         * Add a new element to "rows"
         *
         * @param \com\aliyun\cloudservice\ots2\Row $value
         */
        public function addRows($value)
        {
            $this->rows[] = $value;
        }
    }
}


